service: backend
frameworkVersion: '3'

package:
  individually: true

plugins:
  - serverless-wsgi
  - serverless-python-requirements

custom:
  usersTableName: 'users-table-${self:provider.stage}'
  gameTableName:  'game-table-${self:provider.stage}'
  detectiveLogTableName: 'detective-log-table-${self:provider.stage}'
  activeGamesTableName: 'active-games-table-${self:provider.stage}'
  chatHistoryTableName: 'chat-history-table-${self:provider.stage}'
  pythonRequirements:
    slim: true
    strip: false

provider:
  name: aws
  runtime: python3.9
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ GameTable, Arn ]
            - Fn::GetAtt: [ DetectiveLogTable, Arn ]
            - Fn::GetAtt: [ ActiveGamesTable, Arn ]
            - Fn::GetAtt: [ ChatHistoryTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.usersTableName}
    GAME_TABLE: ${self:custom.gameTableName}
    DETECTIVE_LOG_TABLE: ${self:custom.detectiveLogTableName}
    ACTIVE_GAMES_TABLE: ${self:custom.activeGamesTableName}
    CHAT_HISTORY_TABLE: ${self:custom.chatHistoryTableName}

functions:
  app:
    package:
      patterns:
        - 'src/**'
        - '!requirements.txt'
        - '!package.json'
        - '!package-lock.json'
        - '!.serverless/**'
        - '!venv/**'
        - '!node_modules/**'
    handler: main.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.usersTableName}
    GameTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.gameTableName}
    DetectiveLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.detectiveLogTableName}
    ActiveGamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.activeGamesTableName}
    ChatHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.chatHistoryTableName}
